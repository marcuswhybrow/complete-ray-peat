
package catalog

import (
	"encoding/json"
	"fmt"
	"github.com/marcuswhybrow/ray-peat-rodeo/internal/global"
	"github.com/marcuswhybrow/ray-peat-rodeo/internal/utils"
	"log"
	"strings"
)

templ Peruse(asset *Asset, catalog *Catalog, pagefind bool) {
	@global.Base(asset.FrontMatter.Source.Title) {
		<rpr-layout>
			<article
				if pagefind {
					data-pagefind-body
				}
			>
				<rpr-new-issue></rpr-new-issue>
				<header>
					<div style="display: none">
						<ul>
							for _, speaker := range asset.GetFilterableSpeakers() {
								<li data-pagefind-filter="Participant">{ speaker.GetName() }</li>
							}
						</ul>
						<ul>
							for _, domain := range asset.GetMirrorDomains() {
								<li data-pagefind-filter="Also On">{ domain }</li>
							}
						</ul>
						<ul>
							if asset.FrontMatter.Completion.Issues {
								<li data-pagefind-filter="Completion">Issues</li>
							}
							if asset.FrontMatter.Completion.Content {
								<li data-pagefind-filter="Completion">Content</li>
							}
							if asset.FrontMatter.Completion.Mentions {
								<li data-pagefind-filter="Completion">Mentions</li>
							}
							if asset.FrontMatter.Completion.Timestamps {
								<li data-pagefind-filter="Completion">Timestamps</li>
							}
							if asset.FrontMatter.Completion.ContentVerified {
								<li data-pagefind-filter="Completion">Content Verified</li>
							}
							if asset.FrontMatter.Completion.SpeakersIdentified {
								<li data-pagefind-filter="Completion">Speakers Identified</li>
							}
							if asset.FrontMatter.Completion.Notes {
								<li data-pagefind-filter="Completion">Notes</li>
							}
						</ul>
					</div>
					<div>
						<h1
							if asset.IsComplete() {
								data-state="Complete"
							} else {
								data-state="Todo"
							}
							if asset.HasIssues() {
								data-has-issues="Has Issues"
							} else {
								data-has-issues="No Issues"
							}
							data-medium={ asset.GetFriendlyKind() }
							data-issue-count={ fmt.Sprint(asset.IssueCount()) }
							data-pagefind-filter="Issues[data-has-issues], State[data-state], Medium[data-medium]"
						>
							<a href={ templ.SafeURL(asset.UrlAbsPath) }>{ asset.FrontMatter.Source.Title }</a>
						</h1>
						<p id="details" data-pagefind-ignore>
							<a
								class="date"
								href={ templ.SafeURL(asset.FrontMatter.Source.Url) }
								data-pagefind-sort="date"
							>
								{ asset.Date }
							</a>
							<rpr-pin
								key="Publisher"
								value={ asset.FrontMatter.Source.Series }
								data-pagefind-filter="Publisher[value]"
							></rpr-pin>
						</p>
					</div>
				</header>
				<main>
					<!-- Content -->
					<div class="relative">
						@utils.Unsafe(string(asset.Html))
					</div>
					if !asset.FrontMatter.Completion.Content {
						<div data-pagefind-ignore>
							<!-- Message -->
							<div>
								<p>
									if asset.FrontMatter.Source.Url != "" {
										This { strings.ToLower(asset.GetFriendlyKind()) } is 
										<a
											href={ templ.URL(asset.FrontMatter.Source.Url) }
										>available on { utils.UrlHostname(asset.FrontMatter.Source.Url) }</a>,
										but hasn't yet been added to Ray Peat Rodeo.
										if asset.FrontMatter.Transcription.Url != "" {
											See too, this
											<a
												href={ templ.URL(asset.FrontMatter.Transcription.Url) }
												target="_blank"
											>existing transcript</a>.
										}
									} else {
										This { strings.ToLower(asset.GetFriendlyKind()) } is missing from Ray Peat Rodeo.
										if asset.FrontMatter.Transcription.Url != "" {
											However, there is an 
											<a
												href={ templ.URL(asset.FrontMatter.Transcription.Url) }
												target="_blank"
											>existing transcript</a>
										}
									}
									If you're familiar with Markdown, you can 
									<a
										href={ templ.URL(asset.GitHubEditUrl) }
										target="_blank"
									>edit this page</a> via a GitHub account, and submit your 
									changes as a pull request. Or
									<a
										href={ global.SPONSOR_LINK }
										target="_blank"
									>Support me on GitHub Sponsors</a> { "if" } you like ðŸ˜Š.
								</p>
							</div>
						</div>
					}
				</main>
				<footer>
					<table
						data-pagefind-meta="issues[data-issues], sections[data-sections]"
						data-issues={ toJSON(asset.Issues) }
						data-sections={ toJSON(asset.Sections) }
					>
						<tr>
							<td>Title</td>
							<td>{ asset.FrontMatter.Source.Title }</td>
						</tr>
						<tr>
							<td>Kind</td>
							<td data-pagefind-meta="source.kind">{ asset.FrontMatter.Source.Kind }</td>
						</tr>
						<tr>
							<td>Series</td>
							<td data-pagefind-meta="source.publisher">{ asset.FrontMatter.Source.Series }</td>
						</tr>
						if asset.FrontMatter.Added.Author != "" {
							<tr>
								<td>Added by</td>
								<td data-pagefind-meta="added.author">{ asset.FrontMatter.Added.Author }</td>
							</tr>
							<tr>
								<td>Added on</td>
								<td data-pagefind-meta="added.date">{ asset.FrontMatter.Added.Date }</td>
							</tr>
						}
						<tr>
							<td>Locations</td>
							<td
								data-pagefind-meta="locations[data-locations]"
								data-locations={ toJSON(asset.GetLocations()) }
							>
								<ul>
									for _, mirror := range asset.GetLocations() {
										<li><a href={ templ.SafeURL(mirror) }>{ mirror }</a></li>
									}
								</ul>
							</td>
						</tr>
						<tr>
							<td>Participants</td>
							<td
								data-pagefind-meta="participants[data-participants]"
								data-participants={ toJSON(asset.Speakers) }
							>
								if len(asset.Speakers) == 0 {
									-
								} else {
									<ul>
										for _, contributor := range asset.Speakers {
											<li>{ contributor.GetName() } </li>
										}
									</ul>
								}
							</td>
						</tr>
						<tr>
							<td>GitHub Edit Link</td>
							<td><a href={ templ.SafeURL(asset.GitHubEditUrl) }>{ asset.GitHubEditUrl }</a></td>
						</tr>
						<tr>
							<td>GitHub Raw Link</td>
							<td><a href={ templ.SafeURL(asset.GithubRawUrl) }>{ asset.GithubRawUrl }</a></td>
						</tr>
					</table>
				</footer>
			</article>
		</rpr-layout>
	}
}

func toJSON(i any) string {
	s, err := json.Marshal(i)
	if err != nil {
		log.Fatalf("Failed to marshal JSOn for %v: %v", i, err)
	}
	return string(s)
}
