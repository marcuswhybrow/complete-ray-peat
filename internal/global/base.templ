package global

func gitHubLink() string {
	return GITHUB_LINK
}

templ Base(title string) {
	<!DOCTYPE html>
	<html class="scroll-pt-24">
		<head>
			<title>
				if len(title) > 0 {
					{ title }
				} else {
					{ "Ray Peat Rodeo" }
				}
			</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="stylesheet" href="/assets/tailwind.css"/>
			<script src="/pagefind/pagefind-ui.js" type="text/javascript"></script>
			<script src="https://unpkg.com/htmx.org@1.9.6"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
			<script>
        function relativeDate(origStr) {
          let buildDate = Date.parse(origStr);
          let delta = Date.now() - buildDate;

          let hours = Math.floor(delta / (60 * 60 * 1000));
          if (hours < 24) {
            return 'today';
          }

          let days = Math.floor(delta / (24 * 60 * 60 * 1000));
          if (days == 1) {
            return 'today';
          } else if (days == 2) {
            return 'yesterday';
          } else if (days < 7) {
            return days + ' days ago';
          }

          let weeks = Math.floor(delta / (7 * 24 * 60 * 60 * 1000));
          if (weeks == 1) {
            return 'a week ago';
          } else if (weeks <= 16) {
            return weeks + ' weeks ago';
          }

          return origStr
        }
      </script>
			<script type="module">
        const pagefind = import("/pagefind/pagefind.js").then(async (pf) => {
          await pf.options({
            highlightParam: 'highlight',
            excerptLength: 60,
          });
          return pf;
        });

        document.addEventListener("DOMContentLoaded", async () => {
          const assets = document.getElementById("assets");
          const filtersElm = document.getElementById("rpr-search-filters");
          const input = document.getElementById("rpr-search-input");

          const search = async debounce => {
            let query = input.value;
            const pf = await pagefind;

            const activeFilters = filtersElm.querySelectorAll(".active");
            let finalFilters = {};
            for (const f of activeFilters) {
              const group = f.getAttribute("data-filter-group");
              const id = f.getAttribute("data-filter-id");
              finalFilters[group] = [id, ...(finalFilters[group] || [])];
            }

            // Tells pagefind to search anyway
            if (query === "") {
              query = null;
            }

            const result = await pf.debouncedSearch(query, {
              filters: finalFilters,
            }, debounce);

            console.log("searched", result);

            // User is still typing
            if (result === null) return;

            // Update filter display
            for (const [group, options] of Object.entries(result.filters)) {
              for (const [option, count] of Object.entries(options)) {
                const countId = `${group}/${option}/count`.replaceAll(" ", "-");
                const countElm = document.getElementById(countId);
                countElm.textContent = count;

                const filterId = `${group}/${option}`.replaceAll(" ", "-");
                const filterElm = document.getElementById(filterId);
                if (count == 0) {
                  filterElm.classList.add("no-results");
                } else {
                  filterElm.classList.remove("no-results");
                }
              }
            }

            // No results
            if (query === "") {
              console.log("resetting");
              for (const asset of assets.children) {
                asset.classList.add("hit");
                asset.classList.remove("has-excerpt");
              }
            }

            if (result.results.length === 0) return;

            const data = await Promise.all(result.results.map(r => r.data()));

            for (const asset of assets.children) {
              asset.classList.remove("hit");
              asset.classList.remove("has-excerpt");
            }

            for (const d of data) {
              const asset = document.getElementById(d.raw_url);
              if (asset === null) continue;
              asset.classList.add("hit");
              if (query !== null) {
                asset.classList.add("has-excerpt");
                const excerpt = asset.getElementsByClassName("excerpt")[0];
                let newExcerpts = [];
                for (const subResult of d.sub_results) {
                  console.log(subResult);
                  const elem = document.createElement("div");
                  elem.innerHTML = subResult.excerpt;
                  newExcerpts.push(elem);
                }
                excerpt.replaceChildren(...newExcerpts);
              }
            }
          };

          input.addEventListener("keyup", event => {
            search(300);
          });

          const pf = await pagefind;
          const filters = await pf.filters();

          for (const [name, options] of Object.entries(filters)) {
            const heading = document.createElement("h3");
            heading.textContent = name;
            filtersElm.appendChild(heading);

            const list = document.createElement("ul");
            for (const [option, count] of Object.entries(options)) {
              const li = document.createElement("li");

              li.append(`${option} (`);
              const spanCount = document.createElement("span");
              spanCount.id = `${name}/${option}/count`.replaceAll(" ", "-");
              spanCount.textContent = count;
              li.append(spanCount);
              li.append(")");

              li.id = `${name}/${option}`.replaceAll(" ", "-");
              li.className = `
                text-xs inline-block bg-slate-100 rounded mr-2 mb-2
                text-slate-600 px-2 py-1
                [&.no-results:not(.active)]:bg-slate-50 [&.no-results:not(.active)]:text-slate-400
                [&.active]:bg-slate-400
              `;
              li.setAttribute("data-filter-group", name);
              li.setAttribute("data-filter-id", option);
              li.addEventListener("click", event => {
                li.classList.toggle("active");
                search(0);
              });

              list.appendChild(li);
            }
            filtersElm.appendChild(list);
          }

          let params = new URLSearchParams(document.location.search);
          const handleParam = (paramName, filterGroup) => {
            const param = params.get(paramName);
            if (param === null) return;
            const paramList = param.split(",");
            if (paramList.length === 1 && paramList[0] === "") return;
            for (const i in paramList) {
              const id = `${filterGroup}/${paramList[i]}`;
              console.log("id", id);
              const elem = document.getElementById(id);
              elem.click(); // assumes click adds the .active class
            }
          };

          handleParam("publisher", "Author");
          handleParam("medium", "Medium");
          handleParam("todo", "Todo");
          handleParam("has-issues", "Has-Issues");
        });

        import('/pagefind/pagefind-highlight.js').then(() => {
          new PagefindHighlight({
            highlightParam: 'highlight' 
          });
        })
      </script>
		</head>
		<body
			class="
        scrollbar
        scrollbar-thumb-purple-300
        scrollbar-track-pink-50
      "
			_="
        behavior RelativeDate
          on load 
            set buildDate to my innerHTML then
            set result to call relativeDate(buildDate)
            set my innerHTML to result
            show me with *opacity
          end
        end

        on keydown[key=='/'] 
          if #rpr-search-input does not match <:focus/>
            focus() the #rpr-search-input
            select() the #rpr-search-input
            halt the event
          end

        on keydown[key=='Escape'] send closeSearch to me
      "
		>
			{ children... }
		</body>
	</html>
}
