pub mod timecode;
pub mod speaker;
pub mod sidenote;
pub mod mention;
pub mod github;

use std::collections::BTreeMap;
use markdown_it::MarkdownIt;
use serde::{Serialize, Deserialize};

#[derive(Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Transcription {
    pub url: Option<String>,
    pub author: Option<String>,
    pub date: Option<String>,
    pub kind: Option<TranscriptionKind>,
}

#[derive(Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "kebab-case")]
pub enum TranscriptionKind {
    Text,
    AutoGenerated,
}

#[derive(Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Source {
    pub series: String,
    pub episode: Option<String>,
    pub title: String,
    pub url: String,
    pub kind: SourceKind,
    pub duration: Option<String>,
}

#[derive(Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "kebab-case")]
pub enum SourceKind {
    #[serde(rename = "text")]
    WrittenInterview,

    #[serde(rename = "audio")]
    AudioInterview,

    #[serde(rename = "video")]
    VideoInterview,

    #[serde(rename = "article")]
    WrittenArticle,
}

#[derive(Debug, Clone, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Frontmatter {
    pub source: Source,
    pub speakers: Option<BTreeMap<String, String>>, 
    pub transcription: Option<Transcription>,
}

pub trait ProjectParser {
    fn new_project_parser() -> MarkdownIt;
}

impl ProjectParser for MarkdownIt {
    fn new_project_parser() -> MarkdownIt {
        let mut parser = MarkdownIt::new();

        // Standard markdown parsing rules
        markdown_it::plugins::cmark::add(&mut parser);

        // Custom markdown parsing rules
        timecode::add(&mut parser);
        speaker::add(&mut parser);
        github::add(&mut parser); // must apply before sidenote rules
        sidenote::add(&mut parser);
        mention::add(&mut parser);

        parser
    }
}
