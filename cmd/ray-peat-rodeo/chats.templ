package main 

import "fmt"
import "slices"
import "strconv"

type Year struct {
	Year  int
	Files []*File
}

func splitByYear(files []*File) []Year {
	results := []Year{}
	for _, file := range files {
		yearStr := file.Date[:4]
		year, err := strconv.Atoi(yearStr)
		if err != nil {
			panic("Failed to parse year to in for file")
		}

		index := slices.IndexFunc(results, func(y Year) bool {
			return y.Year == year
		})

		foundYear := index >= 0
		if !foundYear {
			results = append(results, Year{
				Year:  year,
				Files: []*File{file},
			})
		} else {
			results[index].Files = append(results[index].Files, file)
		}
	}
	return results
}

func percentDone(files []*File) int {
	done := numDone(files)
	return int((float32(done) / float32(len(files))) * 100)
}

func numDone(files []*File) int {
	done := 0
	for _, file := range files {
		if !file.IsTodo {
			done += 1
		}
	}
	return done
}

templ DoneFile(file *File) {
	<a
 		href={ templ.URL(file.Permalink) }
 		class="block p-8 rounded rounded-lg shadow-lg bg-white mb-8 mt-8"
	>
		<div class="md:float-right">
			@SpeakerCards(file)
			if file.HasIssues() {
				<div
 					class="relative inline-block align-top overflow-hidden w-16 h-20 rounded-lg shadow rotate-3 text-center bg-gradient-to-br from-yellow-100 to-amber-200"
 					title={ fmt.Sprint(file.IssueCount()) + " GitHub issue" + pluralise(file.IssueCount(), "s") }
				>
					<span
 						class="relative top-4 text-yellow-500 text-3xl"
					>
						{ fmt.Sprint(file.IssueCount()) }
					</span>
					<span class="text-sm absolute bottom-2 left-0 right-0 text-center text-yellow-500">issue{ pluralise(file.IssueCount(), "s") }</span>
				</div>
			}
		</div>
		<ol class="mb-0">
			for i, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
				if i > 0 && i < 3 {
					<span class="mr-2 text-rose-300/90">/</span>
				}
				<li class="inline-block mb-2 mr-2 last:mr-0">
					<span
 						class="text-gray-400/90 uppercase trakcing-wider"
 						title={ mentionCount.MentionablePart.PrefixFirst() + " (" + fmt.Sprint(mentionCount.Count) + " mention" + pluralise(mentionCount.Count, "s") + ")" }
					>{ mentionCount.MentionablePart.Cardinal }</span>
				</li>
			}
			<span class="mr-2 text-rose-300/90">/</span>
			<li
 				class="inline-block mb-2 mr-2 last:mr-0 text-gray-400/90 tracking-wider uppercase"
 				title="Date of conversation"
 				_="install RelativeDate"
			>{ file.Date }</li>
		</ol>
		<h3 class="tracking-tighter text-3xl font-bold text-gray-500 mb-2">{ file.FrontMatter.Source.Title }</h3>
		<div class="tracking-wider text-gray-500">{ file.FrontMatter.Source.Series }</div>
	</a>
}

templ TodoFile(file *File) {
	<div class="mb-1.5">
		<a
 			href={ templ.URL(file.Permalink) }
 			class="text-gray-500 hover:text-gray-600 hover:underline"
		>{ file.FrontMatter.Source.Title }</a>
	</div>
}

templ Chats(allFiles []*File) {
	for _, year := range splitByYear(allFiles) {
		<div class="relative mb-8">
			<h2 class="text-4xl font-bold mt-16 text-gray-700">{ fmt.Sprint(year.Year) }</h2>
			<div
 				title={ fmt.Sprint(numDone(year.Files)) + " / " + fmt.Sprint(len(year.Files)) + " for " + fmt.Sprint(year.Year) }
 				class={
					templ.SafeClass("absolute right-0 top-0 w-10 h-10 rounded-full"),
					templ.SafeClass("[background:radial-gradient(closest-side,white_69%,transparent_70%_100%),conic-gradient(hotpink_" + fmt.Sprint(max(percentDone(year.Files), 1)) + "%,pink_0)]"),
				}
			></div>
		</div>
		for _, file := range year.Files {
			if file.IsTodo {
				@TodoFile(file)
			} else {
				@DoneFile(file)
			}
		}
	}
}

templ SpeakerCards(file *File) {
	for _, speaker := range AtMost(file.TopSpeakers(), 3) {
		<div
 			title={ speaker.Name }
 			class="inline-block rounded-lg overflow-hidden bg-slate-200/60 w-16 h-20 text-center shadow mr-4 mb-4 last:mr-0 rotate-2"
		>
			if len(speaker.AvatarPath) > 0 {
				<div class="w-[9999px] h-20">
					<img src={ speaker.AvatarPath } alt={ speaker.Name } class="h-full "/>
				</div>
			} else {
				<span class="font-bold text-gray-300 text-xl relative relative top-6" title={ speaker.Name }>{ speaker.ID }</span>
			}
		</div>
	}
	if len(file.FrontMatter.Speakers) > 3 {
		<div
 			class="inline-block rounded-lg overflow-hidden bg-slate-200/60 w-16 h-20 text-center shadow mr-4 mb-4 rotate-2"
 			title={ fmt.Sprint(len(file.FrontMatter.Speakers)-3) + " more speakers" }
		>
			<span
 				class="font-bold text-gray-300 text-xl relative relative top-6"
			>
				+{ fmt.Sprint(len(file.FrontMatter.Speakers)-3) }
			</span>
		</div>
	}
}

func AtMost[T any](ts []T, i int) []T {
	if len(ts) > i {
		return ts[:i]
	}
	return ts
}
