package main

import "fmt"
import "github.com/marcuswhybrow/ray-peat-rodeo/internal/markdown/ast"

templ ChatCard(file *File) {
	<a
 		href={ templ.URL(file.Permalink) }
 		class={
			"relative align-top inline-block transition-all m-4 hover:shadow-2xl rounded-lg w-80 font-bold hover:scale-110",
			templ.KV(templ.SafeClass("text-gray-600 shadow shadow-gray-500/20 hover:shadow-gray-400/50 bg-gradient-to-br from-gray-50 to-gray-100"), file.IsTodo),
			templ.KV(templ.SafeClass("text-sky-900 shadow-lg shadow-sky-800/20 hover:shadow-sky-200/70 bg-gradient-to-br hover:bg-gradient-to-br from-sky-100 hover:from-sky-50 to-blue-200 hover:to-blue-300"), !file.IsTodo),
		}
	>
		<div class="bg-gradient-to-br from-white/60 to-white/40 p-8 pb-4">
			<span class="text-xs block font-normal mb-4">
				{ file.FrontMatter.Source.Series }
			</span>
			<span class="mb-4 block tracking-tight leading-6">
				{ file.FrontMatter.Source.Title }
			</span>
		</div>
		<div class="p-8 pt-4">
			if file.HasIssues() {
				<br/>
				<span class="inline-block bg-gradient-to-br from-yellow-100 to-amber-200 py-2 px-4 rounded-full text-sm text-yellow-900">
					<img src="/assets/images/github-mark.svg" class="w-4 h-4 relative -top-px inline-block mr-1"/>
					{ fmt.Sprint(file.IssueCount()) } issue
					if file.HasIssues() {
						s 
					}
				</span>
			}
			if file.IsTodo && len(file.FrontMatter.Transcription.Url) > 0 {
				<br/>
				switch file.FrontMatter.Transcription.Kind {
					case "text":
						<span class="inline-block bg-gradient-to-br from-lime-50 to-green-300 py-2 px-4 rounded-full text-sm text-green-900">üéâ Human Transcript</span>
					default:
						<span class="inline-block bg-gradient-to-br from-green-100 to-green-200 py-2 px-4 rounded-full text-sm text-green-900 font-normal">Transcript Exists</span>
				}
			}
			if len(file.FrontMatter.Speakers) > 0 {
				<span
 					class={
						"inline-block py-2 ml-2 text-sm font-normal",
						templ.KV("text-gray-900", file.IsTodo),
						templ.KV("text-sky-900", !file.IsTodo),
					}
				>
					<strong>{ fmt.Sprint(len(file.FrontMatter.Speakers)) }</strong>
					people
				</span>
			}
		</div>
	</a>
}

func pluralise(i int, s string) string {
	if i != 1 {
		return s
	}
	return ""
}

templ mentionablePartPill(mentionablePart ast.MentionablePart, count int, classes string) {
	<span
 		class={ templ.SafeClass(classes) }
 		title={ mentionablePart.PrefixFirst() + " (" + fmt.Sprint(count) + " mention" + pluralise(count, "s") + ")" }
	>
		{ mentionablePart.Cardinal }
	</span>
}

templ issuePill(count int) {
	<span
 		title={ fmt.Sprint(count) + " GitHub issue" + pluralise(count, "s") }
 		class="
      py-2 px-4 
      bg-yellow-100 
      rounded-full 
      border-4 border-yellow-400
      shadow shadow-yellow-500/40
    "
	>
		<span
 			class="
        text-transparent bg-clip-text
        bg-gradient-to-b from-yellow-500 to-yellow-400/70
      "
		>üèÜ { fmt.Sprint(count) + " issue" + pluralise(count, "s") }</span>
	</span>
}

templ mentionsAndIssues(file *File) {
	<ol class="mb-4">
		for _, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
			<li class="inline-block mb-2 first:ml-0 ml-2">
				@mentionablePartPill(
          mentionCount.MentionablePart, 
          mentionCount.Count,
          "py-2 py-4 bg-rose-100/90",
				)
			</li>
		}
		if file.HasIssues() {
			<li class="inline-block -ml-2">
				@issuePill(file.IssueCount())
			</li>
		}
	</ol>
}

templ speakerCards(file *File) {
	<div class="">
		for speakerKey, speakerName := range file.FrontMatter.Speakers {
			<div
 				title={ speakerName }
 				class="inline-block rounded-lg overflow-hidden bg-slate-200/60 w-16 h-20 text-center shadow mr-4 mb-4 last:mr-0 rotate-2"
			>
				if imgSrc, found := SpeakerAvatar(speakerName); found {
					<div class="w-[9999px] h-20">
						<img src={ imgSrc } alt={ speakerName } class="h-full "/>
					</div>
				} else {
					<span class="font-bold text-gray-300 text-xl relative relative top-6" title={ speakerName }>{ speakerKey }</span>
				}
			</div>
		}
	</div>
}

templ rayPicture() {
	<div
 		class="
      float-right
      rotate-2
      ml-8
    "
	>
		<div
 			class="
        w-[255px]
        h-[143px]
        overflow-hidden
        relative
      "
		>
			<div
 				class="
          absolute top-0 right-0 bottom-0 left-0 
          bg-gradient-to-br from-white/0 via-white/20 via-50% to-90% to-white/60
          z-20
        "
			></div>
			<img
 				src="/assets/images/ray-peat-sitting.jpg"
 				alt="Ray Peat Sketching"
 				class="
          relative
          rounded-lg
          block
          z-10
        "
			/>
		</div>
		<div class="w-64 h-64 absolute top-0 left-4">
			<div class="absolute w-32 h-64 -top-16 left-0 z-20 overflow-hidden">
				<div
 					class="
            w-64 h-64 border-8 border-purple-100/70 rounded-full
            absolute left-0
          "
				></div>
			</div>
			<div class="absolute w-32 h-64 -top-16 right-0 z-0 overflow-hidden">
				<div
 					class="
            w-64 h-64 border-8 border-purple-100/70 rounded-full
            absolute right-0
          "
				></div>
			</div>
		</div>
	</div>
}

templ topLeftInterview(file *File) {
	<a
 		href={ templ.URL(file.Permalink) }
 		class="
            flex-auto
            mr-8 last:mr-0
            px-16 pt-12 pb-12
            border-8 border-rose-100/70 hover:border-rose-400/100
            block -rotate-1
            transition-all
            rounded-lg
            relative
          "
	>
		<ol class="mb-4">
			for i, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
				if i > 0 && i < 3 {
					<span class="mr-2 text-rose-300/90">/</span>
				}
				<li class="inline-block mb-2 mr-2 last:mr-0">
					@mentionablePartPill(
                  mentionCount.MentionablePart, 
                  mentionCount.Count, 
                  "uppercase tracking-wide text-rose-400/90",
								)
				</li>
			}
			<span class="mr-2 text-rose-300/90">/</span>
			<li
 				class="inline-block mb-2 mr-2 last:mr-0 text-rose-400/90 tracking-wider uppercase"
 				_="install RelativeDate"
			>{ file.FrontMatter.Added.Date }</li>
		</ol>
		<div class="mb-10">
			<h3 class="text-3xl text-rose-500 font-bold tracking-tight">
				{ file.FrontMatter.Source.Title }
			</h3>
			<p class="text-rose-500 tracking-wide text-lg mt-2">{ file.FrontMatter.Source.Series }</p>
		</div>
		@speakerCards(file)
	</a>
}

templ topRightInterview(file *File) {
	<a
 		href={ templ.URL(file.Permalink) }
 		class="
      flex-auto
      mr-8 last:mr-0
      px-16 pt-16 pb-12
      transition-all
      rounded-lg
      hover:bg-white/50 hover:shadow-lg
    "
	>
		<ol class="mb-4">
			for i, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
				if i > 0 && i < 3 {
					<span class="mr-2 text-rose-300/90">/</span>
				}
				<li class="inline-block mb-2 mr-2 last:mr-0">
					@mentionablePartPill(
            mentionCount.MentionablePart, 
            mentionCount.Count, 
            "uppercase tracking-wide text-gray-400/90",
					)
				</li>
			}
			<span class="mr-2 text-rose-300/90">/</span>
			<li
 				class="inline-block mb-2 mr-2 last:mr-0 text-gray-400/90 tracking-wider uppercase"
 				_="install RelativeDate"
			>{ file.FrontMatter.Added.Date }</li>
		</ol>
		<div class="mb-10">
			<h3 class="text-3xl text-gray-600 font-bold tracking-tight">
				{ file.FrontMatter.Source.Title }
			</h3>
			<p class="text-gray-600 tracking-wide text-lg mt-2">{ file.FrontMatter.Source.Series }</p>
		</div>
		@speakerCards(file)
	</a>
}

templ bottomLeftInterview(file *File) {
	<a
 		href={ templ.URL(file.Permalink) }
 		class="
      flex-1
      mr-8 last:mr-0
      px-16 pt-16 pb-12
      transition-all
      rounded-lg
      hover:bg-white/50 hover:shadow-lg
    "
	>
		<ol class="mb-4">
			for i, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
				if i > 0 && i < 3 {
					<span class="mr-2 text-rose-300/90">/</span>
				}
				<li class="inline-block mb-2 mr-2 last:mr-0">
					@mentionablePartPill(
            mentionCount.MentionablePart, 
            mentionCount.Count, 
            "uppercase tracking-wide text-gray-400/90",
					)
				</li>
			}
			<span class="mr-2 text-rose-300/90">/</span>
			<li
 				class="inline-block mb-2 mr-2 last:mr-0 text-gray-400/90 tracking-wider uppercase"
 				_="install RelativeDate"
			>{ file.FrontMatter.Added.Date }</li>
		</ol>
		<div class="mb-10">
			<h2 class="text-3xl font-bold text-gray-600 tracking-tight">
				{ file.FrontMatter.Source.Title }
			</h2>
			<p class="text-gray-600 tracking-wide text-lg mt-2">{ file.FrontMatter.Source.Series }</p>
		</div>
		@speakerCards(file)
	</a>
}

templ meetRay() {
	<a
 		href=""
 		class={ templ.SafeClass(`
      flex-1
      mr-8 last:mr-0
      px-16 pt-16 pb-12
      border-8 border-sky-100/70 hover:border-sky-400 [&>.double]:hover:border-blue-400
      transition-all
      relative
    `) }
	>
		<div class="double absolute top-0 right-0 bottom-0 left-0 border-8 border-blue-100/70 rotate-3"></div>
		<div class="text-center mb-16">
			<h3
 				class="
          font-bold text-3xl tracking-wide
          text-transparent
          bg-clip-text
          bg-gradient-to-br from-sky-200/70 to-blue-200/70
        "
			>Meet Ray</h3>
		</div>
		@rayPicture()
		<div class="text-sky-500/90">
			<p class="font-bold tracking-wide">Energy and structure are interdependent at every level.</p>
		</div>
	</a>
}

templ renderLatest(files []*File) {
	<div
 		class="
      [background-image:radial-gradient(50%_50%_at_top_50%_left_33%,rgba(220,255,220,0.6),rgba(220,255,220,0))]
    "
	>
		<div
 			class="
        max-w-screen-2xl mx-auto px-8
      "
		>
			<h2
 				class="
          text-3xl text-transparent tracking-wide font-bold
          bg-clip-text
          bg-gradient-to-br from-rose-100/80 to-pink-200/80
          pl-[10%]
          mb-6
          -rotate-1
        "
			>Latest</h2>
			<div class="flex">
				@topLeftInterview(files[0])
				@topRightInterview(files[1])
			</div>
			<div class="flex mt-10 mb-20">
				@bottomLeftInterview(files[2])
				@meetRay()
			</div>
			<div class="text-center mb-4">
				<a
 					href=""
 					class="
            z-30
            px-6 py-4
            rounded-full 
            bg-blue-600 
            text-white font-bold text-xl relative 
            shadow-2xl shadow-blue-700/40 hover:shadow-xl
            inline-block
            transition-all
            scale-100 hover:scale-90
          "
				>View All Interviews</a>
			</div>
		</div>
	</div>
}

var marcus = map[string]string{"MW": "Marcus"}

templ keySrc(title string) {
	<span class="text-red-400">{ title }:</span>
}

templ mentionSrc(primary, secondary, label string) {
	<span class="text-purple-500">[[{ primary }]]</span>
}

templ speakerSrc(initials string) {
	<span class="text-red-500">{ initials }:</span>
}

templ issueSrc(id int) {
	<span class="text-purple-500">{ "{#" }{ fmt.Sprint(id) }{ "}" }</span>
}

templ markdown() {
	<div class="inline-block relative mb-16 2xl:mb-0">
		<div class="w-[150px] h-[100px] bg-pink-100 rounded-lg absolute -rotate-1 -left-8"></div>
		<div class="w-[100px] h-[90px] bg-pink-50 rounded-lg absolute -rotate-2 -left-32 top-32"></div>
		<div class="w-[40px] h-[30px] bg-pink-50/60 rounded absolute -rotate-3 -left-24 top-16"></div>
		<div class="w-[200px] h-[150px] bg-pink-200/60 rounded-lg absolute -rotate-2 -right-32 -bottom-32"></div>
		<div
 			class="
      relative top-16
      text-left
      rounded-lg w-[500px] overflow-hidden
      shadow-2xl
      shadow-pink-500/10
      font-mono text-lg text-pink-600
      bg-gradient-to-bl from-pink-300 to-white
      -rotate-3
    "
		>
			<div class="h-8">
				<div class="pt-6 pl-8">
					<div class="rounded-full bg-red-400/40 w-4 h-4 inline-block"></div>
					<div class="rounded-full bg-red-400/40 w-4 h-4 ml-[10px] inline-block"></div>
					<div class="rounded-full bg-red-400/40 w-4 h-4 ml-[10px] inline-block"></div>
				</div>
			</div>
			<div id="frontmatter" class="px-8 pt-6 pb-6">
				<p>---</p>
				<p>
					@keySrc("speakers")
				</p>
				<p class="ml-4">
					@keySrc("RP")
					{ " " }Ray Peat
				</p>
				<p class="ml-4">
					@keySrc("I")
					{ " " }Interviewer
				</p>
				<p>---</p>
				<p>
					<br/>
					@speakerSrc("RP")
					{ " " }
					<span class="text-purple-500">[18:32]</span>
					There was an Austrailian study 
					@issueSrc(12)
					{ " " }
					around that time.
				</p>
				<p>
					<br/>
					@speakerSrc("I")
					{ " " }
					And when did you first discover 
					@mentionSrc("Blake, William", "", "")
					?
				</p>
			</div>
		</div>
	</div>
}

templ program() {
	<div
 		class="
      relative
      inline-block align-top
      ml-16 mr-12
      mt-40
      rotate-[95deg] 2xl:rotate-[-6deg]
      transition-all
    "
 		_="
      on load
        trigger hover on me

      on hover
        transition *top to 10px over 1.5s
        transition *top to 0px over 1.5s
        trigger hover on me
        
    "
	>
		<span
 			class="
        pt-8 inline-block 
        text-transparent bg-clip-text 
        bg-gradient-to-b from-pink-300/50 to-70% to-purple-400/30
        text-9xl
      "
		>üëâ</span>
	</div>
}

templ utterance(speaker string) {
	<div
 		class={
			"font-sans",
			templ.KV("ml-1 mr-16", speaker == "Ray Peat"),
			templ.KV("ml-16 mr-1", speaker != "Ray Peat"),
		}
	>
		<div
 			class={
				"text-sm mt-8 mb-4 block",
				templ.KV("text-gray-400", speaker == "Ray Peat"),
				templ.KV("text-sky-400", speaker != "Ray Peat"),
			}
		>
			{ speaker }
		</div>
		<div
 			class={
				"p-8 rounded shadow",
				templ.KV("text-gray-900 bg-gray-100", speaker == "Ray Peat"),
				templ.KV("text-sky-900 bg-gradient-to-br from-sky-100 to-blue-200", speaker != "Ray Peat"),
			}
		>
			{ children... }
		</div>
	</div>
}

templ blakeMention() {
	<span
 		hx-trigger="load"
 		hx-target="find .popup"
 		hx-get="/api/mentionable/popup/william-blake"
 		hx-swap="innerHTML"
 		hx-select=".hx-select"
 		class="relative cursor-pointer"
 		_={ `
      on mouseenter
        remove .hidden from .popup in me
        send stopWiggling to .label in me

      on mouseleave
        wait for mouseenter or 500ms
        if the result's type is not 'mouseenter'
          add .hidden to .popup in me
        end
      
    ` }
	>
		<span
 			class="
        label
        font-mono font-bold tracking-normal 
        drop-shadow-md box-decoration-clone 
        border-b hover:border-b-2
			  text-sky-800 hover:text-sky-900 shadow-pink-300 border-sky-800
        inline-block
        rotate-0
        transition-all
      "
 			_={ `
        on load 
          wait 1s
          trigger wiggle on me

        on wiggle
          set x to Math.random() * 10
          if x > 8 
            wait for stopWiggling or 8s
          else if x > 3
            wait for stopWiggling or 5s
          else 
            wait for stopWiggling or 2s
          end
          if the result's type is not 'stopWiggling'
            set my *transform to 'rotate(16deg)' then settle
            set my *transform to 'rotate(-6deg)' then settle
            set my *transform to 'rotate(6deg)' then settle
            set my *transform to 'rotate(-4deg)' then settle
            set my *transform to 'rotate(0deg)' then settle
            trigger wiggle on me
          end
        ` }
		>William Blake</span>?
		<span
 			class="
        popup
        bg-white shadow-2xl block absolute 
        hidden
        z-10 
        overflow-hidden
        overflow-y-auto 
        mb-4 
        w-[400px] h-[300px]
        left-[calc(50%-200px)]
        top-8
        scrollbar
        scrollbar-track-slate-100
        scrollbar-thumb-slate-200
      "
 			_="
        on click halt the event
      "
		>
			<span class="text-center text-gray-400 block p-8">
				loading William Blake...
			</span>
		</span>
	</span>
}

templ issue() {
	<span
 		class="
      z-10 block transition-all m-2 p-4 hover:translate-y-1 shadow-xl hover:shadow-2xl shadow-yellow-800/20 hover:shadow-yellow-600/40 rounded-md bg-gradient-to-br from-yellow-200 from-10% to-amber-200 hover:from-yellow-100 hover:from-70% hover:to-amber-200 xl:block w-2/5 mr-[-20%] float-right clear-right text-sm relative leading-5 tracking-tight
      cursor-pointer
    "
	>
		<span class="text-yellow-900 font-bold mr-0.5">
			<img src="/assets/images/github-mark.svg" class="h-4 w-4 inline-block relative top-[-1px] mr-0.5"/> #12
		</span>
		<span class="text-yellow-800">Which Australian study is Ray referring to?</span>
	</span>
}

templ output() {
	<div
 		class="
      inline-block align-top
      w-[90%] lg:w-[900px] 2xl:w-[700px] 
      text-left
      backdrop-blur-2xl
      bg-gradient-to-br from-white/90 to-gray-100/30
      rounded-lg 
      shadow-2xl shadow-purple-700/20
    "
	>
		<div class="py-4 bg-gradient-to-r from-blue-200 to-purple-300 rounded-t-lg">
			<div class="h-8 w-3/5 mx-auto bg-gradient-to-br from-white/60 to-white/50 rounded"></div>
		</div>
		<div class="px-8 pb-10 pt-2 max-w-xl mx-auto">
			@utterance("Ray Peat") {
				<p>
					<span class="text-sm px-2 py-1 rounded-md bg-gray-300 hover:bg-gray-500 text-gray-50 cursor-pointer">18:32</span>
					There was an Australian
					@issue()
					study around that time.
				</p>
			}
			@utterance("Interviewer") {
				<p>
					When did you first discover 
					@blakeMention()
				</p>
			}
		</div>
	</div>
}

templ demo() {
	<div
 		class="
      text-center
      from-purple-300 to-white
      [background-image:radial-gradient(50%_50%_at_top_50%_right_33%,rgba(255,220,255,1),rgba(255,220,255,0))]
    "
	>
		@markdown()
		@program()
		@output()
	</div>
}

templ Index(allFiles, latest, humanTrascripts []*File, progress float32) {
	@Base("Ray Peat Rodeo") {
		<article class="pt-16">
			<section class="mb-24">
				<div class="text-center mx-8 mt-8">
					<p class="text-4xl font-bold tracking-wide leading-10 text-slate-500">
						Ray Peat's <span class="text-transparent bg-clip-text bg-gradient-to-br from-sky-300 to-blue-400">interviews</span>
						<br/>
						<span class="text-transparent bg-clip-text bg-gradient-to-r from-red-300 via-yellow-300 to-green-300 italic">supercharged</span> { "for" } discoverability.
					</p>
				</div>
				<div class="mt-16 mb-48">
					@demo()
				</div>
			</section>
			<section class="mb-32">
				@renderLatest(latest)
			</section>
			<section class="">
				<div class="max-w-screen-xl mx-auto px-8">
					<div class="mb-16">
						<div class="text-3xl mb-4">
							<span>{ fmt.Sprint(len(latest)) } / { fmt.Sprint(len(allFiles)) } Interviews Transcribed</span>
						</div>
						@progressBar(progress)
					</div>
				</div>
			</section>
			<section class="">
				<div class="max-w-screen-xl mx-auto px-8">
					<div class="flex mb-16">
						<div class="flex-auto border-t-8 border-gray-100 mr-32 pt-8">
							<h2 class="text-4xl mb-8">Support</h2>
							<p>
								<a
 									href="https://github.com/sponsors/marcuswhybrow"
 									class="font-bold hover:underline"
								>Support Ray Peat Rodeo</a>
								on GitHub Sponsors!
							</p>
						</div>
						<div class="flex-auto border-t-8 border-gray-100 pt-8">
							<h2 class="text-4xl mb-8">Blog & Chat</h2>
							<p class="mb-4">Blog comming soon.</p>
							<p>Discord server forthcomming.</p>
						</div>
					</div>
				</div>
			</section>
		</article>
	}
}

templ progressBar(progress float32) {
	<div class="w-full bg-gray-200 rounded-full h-8 dark:bg-gray-700">
		<div
 			class="bg-blue-600 h-8 rounded-full"
 			data-width={ fmt.Sprint(progress*100) + "%" }
 			_="on load set my *width to my @data-width"
		></div>
	</div>
}
