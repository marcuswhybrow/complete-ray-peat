package main

import "github.com/marcuswhybrow/ray-peat-rodeo/internal/global"
import "time"
import "fmt"
import "strconv"
import "slices"

func pluralise(i int, s string) string {
	if i != 1 {
		return s
	}
	return ""
}

templ Index(allAssets []*Asset, latestAsset *Asset, progress float32, latestBlogPost *BlogPost) {
	@Base("Ray Peat Rodeo") {
		<article class="pt-16 overflow-x-hidden">
			<section class="mb-24">
				<div class="text-center mx-8 mt-8">
					<p class="text-4xl font-bold tracking-wide leading-10 text-slate-500">
						Ray Peat's <span class="text-transparent bg-clip-text bg-gradient-to-br from-sky-300 to-blue-400">interviews</span>
						<br/>
						<span class="text-transparent bg-clip-text bg-gradient-to-r from-red-300 via-yellow-300 to-green-300 italic">supercharged</span> { "for" } discoverability.
					</p>
				</div>
			</section>
			<section class="max-w-screen-lg mx-auto mb-32 relative">
				<!-- Side bubbles -->
				<div class="z-30 mx-8 2xl:mx-0">
					<div class="grid grid-cols-1 sm:grid-cols-3 gap-4 transition-all">
						<!-- Latest GitHub commit -->
						<div
							class="block bg-stone-100 rounded-lg shadow-md relative"
							_="
                on load 
                  fetch https://api.github.com/repos/marcuswhybrow/ray-peat-rodeo as json
                  if result.stargazers_count 
                    put result.stargazers_count into .github-stars's innerHTML
                    put result.watchers_count into .github-watchers's innerHTML
                    put result.forks_count into .github-forks's innerHTML
                    put result.open_issues_count into .github-issues's innerHTML
                  end

                on load 
                  fetch https://api.github.com/repos/marcuswhybrow/ray-peat-rodeo/commits as json
                  if result[0].sha
                    put result[0].commit.message.split('\n')[0] into .github-latest-commit-message's innerHTML
                    put relativeDate(result[0].commit.author.date.substring(0,10)) into .github-latest-commit-when's innerHTML
                    put result[0].author.login into .github-latest-commit-login's innerHTML
                    put result[0].author.avatar_url into .github-latest-commit-avatar's @src
                    put result[0].author.html_url into .github-latest-commit-avatar-link's @href
                    set commitsBy to 'https://github.com/marcuswhybrow/ray-peat-rodeo/commits?author=' + result[0].author.login
                    put commitsBy into .github-latest-commit-login's @href
                    put result[0].html_url into .github-latest-commit-when's @href
                    put result[0].html_url into .github-latest-commit-message's @href
                    remove .hidden from .github-latest-commit
                  else 
                    remove .hidden from .github-latest-commit-fallback
                  end
              "
						>
							<div class="p-8 pb-4">
								<img src="/assets/images/github-logo.png" class="h-10 relative -left-1"/>
								<a
									href="https://github.com/marcuswhybrow/ray-peat-rodeo"
									class="font-bold text-sky-500 hover:underline"
								>marcuswhybrow/ray-peat-rodeo</a>
							</div>
							<!-- Stars, Forks & Issues -->
							<div
								class="
                  text-sm 
                  absolute top-10 right-10
                  sm:relative sm:top-0 sm:right-0 sm:px-8 sm:pb-4
                  lg:absolute lg:top-10 lg:right-10 lg:p-0
                "
							>
								<a
									class="inline-block mr-2"
									href="https://github.com/marcuswhybrow/ray-peat-rodeo/stargazers"
									title="GitHub Stars"
								>
									<span class="github-stars font-bold opacity-60">2</span>
									<img
										src="/assets/images/star-full-icon.svg"
										class="h-4 inline-block relative -top-0.5 opacity-50 ml-1"
									/>
								</a>
								<a
									class="inline-block mr-2"
									href="https://github.com/marcuswhybrow/ray-peat-rodeo/fork"
									title="GitHub Forks"
								>
									<span class="github-forks font-bold opacity-60">0</span>
									<img
										src="/assets/images/branching-icon.svg"
										class="h-4 inline-block relative top-[-1px] opacity-50 ml-1"
									/>
								</a>
								<a
									class="inline-block"
									href={ global.GITHUB_LINK + "/issues" }
									title="GitHub Issues"
								>
									<span class="github-issues font-bold opacity-60">38</span>
									<img
										src="/assets/images/exclamation-round-icon.svg"
										class="h-4 inline-block relative top-[-1px] opacity-40 ml-1"
									/>
								</a>
							</div>
							<div class="github-latest-commit-fallback hidden px-8 transition-all">
								Last updated 
								<span _="install RelativeDate">{ time.Now().Format("2006-01-02") }</span>.
							</div>
							<div class="github-latest-commit hidden transition-all">
								<!-- Committer -->
								<div class="px-8">
									<a
										class="github-latest-commit-avatar-link"
										href=""
									>
										<img
											class="inline-block github-latest-commit-avatar w-6 h-6 rounded-full overflow-hidden"
											src=""
										/>
									</a>
									<a
										class="github-latest-commit-login ml-1 text-sm font-bold hover:underline"
										href=""
									></a>
									<a
										class="github-latest-commit-when font-mono tracking-wide text-gray-600 hover:underline"
										href=""
									></a>
								</div>
								<!-- Commit message -->
								<div class="p-8 pt-1">
									<a
										class="github-latest-commit-message text-sm hover:underline"
										href=""
										title="Commit message"
									></a>
								</div>
							</div>
						</div>
						<!-- Latest Blog post -->
						<a href={ templ.URL(latestBlogPost.Permalink) } class="block p-8 rounded-lg bg-pink-100 shadow-md">
							<div class="float-left">
								<div class="pr-4">
									@Avatar(latestBlogPost.AuthorAvatarPath, "?", latestBlogPost.Author)
								</div>
							</div>
							<p class="text-sm uppercase text-pink-500 pt-2">From the Blog</p>
							<h3 class="tracking-tighter text-xl font-bold text-pink-500 mb-2">{ latestBlogPost.Title }</h3>
							<div class="tracking-wider text-pink-500 clear-left">{ latestBlogPost.Author }</div>
						</a>
						<!-- Supporters -->
						<a href={ templ.URL(global.SPONSOR_LINK) } class="block px-8 py-8 bg-gradient-to-tl from-blue-300 to-sky-100 rounded-lg shadow-md">
							<img
								class="w-14 h-14 rounded-lg rotate-3 border inline-block ml-4 align-top float-right"
								src="https://avatars.githubusercontent.com/u/151856434"
								title="Thank you to HayesKim, for sponsoring Ray Peat Rodeo on GitHub Sponsors"
							/>
							<p class="text-sm uppercase text-sky-500 pt-2">Thanks to...</p>
							<span class="inline-block mt-4 text-gray-500 uppercase tracking-wider italic">{ "for" } supporting Ray Peat Rodeo on <strong>GitHub Sponsors</strong></span>
						</a>
					</div>
				</div>
				<!-- Assets -->
				<div class="mx-8">
					for _, year := range splitByYear(allAssets) {
						<div class="relative mb-8">
							<h2 class="text-4xl font-bold mt-16 text-gray-700">
								if year.Year == 0 {
									Date Unknown
								} else {
									{ fmt.Sprint(year.Year) }
								}
							</h2>
							<div
								title={ fmt.Sprint(numDone(year.Assets)) + " / " + fmt.Sprint(len(year.Assets)) + " for " + fmt.Sprint(year.Year) }
								class={
									templ.SafeClass("absolute right-0 top-0 w-10 h-10 rounded-full"),
									templ.SafeClass("[background:radial-gradient(closest-side,white_69%,transparent_70%_100%),conic-gradient(hotpink_" + fmt.Sprint(max(percentDone(year.Assets), 1)) + "%,pink_0)]"),
								}
							></div>
						</div>
						for _, file := range year.Assets {
							if file.FrontMatter.Completion.SpeakersIdentified {
								<a
									href={ templ.URL(file.UrlAbsPath) }
									class="block p-8 rounded rounded-lg shadow-lg bg-white mb-8 mt-8"
								>
									<div class="md:float-right">
										@SpeakerCards(file)
										if file.HasIssues() {
											<div
												class="relative inline-block align-top overflow-hidden w-16 h-20 rounded-lg shadow rotate-3 text-center bg-gradient-to-br from-yellow-100 to-amber-200"
												title={ fmt.Sprint(file.IssueCount()) + " GitHub issue" + pluralise(file.IssueCount(), "s") }
											>
												<span
													class="relative top-4 text-yellow-500 text-3xl"
												>
													{ fmt.Sprint(file.IssueCount()) }
												</span>
												<span class="text-sm absolute bottom-2 left-0 right-0 text-center text-yellow-500">issue{ pluralise(file.IssueCount(), "s") }</span>
											</div>
										}
										if !file.IsComplete() {
											<div
												class="relative inline-block align-top overflow-hidden w-16 h-20 rounded-lg shadow rotate-3 text-center bg-gradient-to-br from-pink-100 to-red-200"
												title="Work In Progress"
											>
												<span class="relative top-6 text-red-500 text-2xl">WIP</span>
											</div>
										}
									</div>
									<ol class="mb-0">
										if file.FrontMatter.Completion.Mentions {
											for i, mentionCount := range AtMost(file.TopPrimaryMentionables(), 3) {
												if i > 0 && i < 3 {
													<span class="mr-2 text-rose-300/90">/</span>
												}
												<li class="inline-block mb-2 mr-2 last:mr-0">
													<span
														class="text-gray-400/90 uppercase trakcing-wider"
														title={ mentionCount.MentionablePart.PrefixFirst() + " (" + fmt.Sprint(mentionCount.Count) + " mention" + pluralise(mentionCount.Count, "s") + ")" }
													>{ mentionCount.MentionablePart.Cardinal }</span>
												</li>
											}
											<span class="mr-2 text-rose-300/90">/</span>
										}
										<li
											class="inline-block mb-2 mr-2 last:mr-0 text-gray-400/90 tracking-wider uppercase"
											title="Date of conversation"
											_="install RelativeDate"
										>{ file.Date }</li>
									</ol>
									<h3 class="tracking-tighter text-3xl font-bold text-gray-500 mb-2">{ file.FrontMatter.Source.Title }</h3>
									<div class="tracking-wider text-gray-500">{ file.FrontMatter.Source.Series }</div>
								</a>
							}
							if !file.FrontMatter.Completion.SpeakersIdentified {
								<div class="mb-1.5">
									<a
										href={ templ.URL(file.UrlAbsPath) }
										class="text-gray-500 hover:text-gray-600 hover:underline"
									>
										{ file.FrontMatter.Source.Title }
									</a>
									if file.FrontMatter.Completion.Content && file.FrontMatter.Transcription.Kind == "auto-generated" {
										<span title="AI Generated Transcript Available" class="border-gray-300 border px-2 pt-0.5 pb-1 rounded-full text-gray-300 cursor-help ml-1">AI</span>
									}
								</div>
							}
						}
					}
				</div>
			</section>
		</article>
	}
}

type Year struct {
	Year   int
	Assets []*Asset
}

func splitByYear(assets []*Asset) []Year {
	results := []Year{}
	for _, file := range assets {
		yearStr := file.Date[:4]
		year, err := strconv.Atoi(yearStr)
		if err != nil {
			panic("Failed to parse year to in for file")
		}

		index := slices.IndexFunc(results, func(y Year) bool {
			return y.Year == year
		})

		foundYear := index >= 0
		if !foundYear {
			results = append(results, Year{
				Year:   year,
				Assets: []*Asset{file},
			})
		} else {
			results[index].Assets = append(results[index].Assets, file)
		}
	}
	return results
}

func percentDone(assets []*Asset) int {
	done := numDone(assets)
	return int((float32(done) / float32(len(assets))) * 100)
}

func numDone(assets []*Asset) int {
	done := 0
	for _, file := range assets {
		if file.IsComplete() {
			done += 1
		}
	}
	return done
}

templ Avatar(imgPath, initials, name string) {
	<div
		title={ name }
		class="inline-block rounded-lg overflow-hidden bg-slate-200/60 w-16 h-20 text-center shadow mr-4 mb-4 last:mr-0 rotate-2"
	>
		if len(imgPath) > 0 {
			<div class="w-[9999px] h-20">
				<img src={ imgPath } alt={ name } class="h-full "/>
			</div>
		} else {
			<span class="font-bold text-gray-300 text-xl relative relative top-6" title={ name }>{ initials }</span>
		}
	</div>
}

templ SpeakerCards(asset *Asset) {
	if len(asset.FrontMatter.Speakers) <= 4 {
		for _, speaker := range AtMost(asset.TopSpeakers(), 4) {
			@Avatar(speaker.AvatarPath, speaker.ID, speaker.Name)
		}
	} else {
		for _, speaker := range AtMost(asset.TopSpeakers(), 3) {
			@Avatar(speaker.AvatarPath, speaker.ID, speaker.Name)
		}
		<div
			class="inline-block rounded-lg overflow-hidden bg-slate-200/60 w-16 h-20 text-center shadow mr-4 mb-4 rotate-2"
			title={ fmt.Sprint(len(asset.FrontMatter.Speakers)-3) + " more speaker" + pluralise(len(asset.FrontMatter.Speakers)-3, "s") }
		>
			<span
				class="font-bold text-gray-300 text-xl relative relative top-6"
			>
				+{ fmt.Sprint(len(asset.FrontMatter.Speakers)-3) }
			</span>
		</div>
	}
}

func AtMost[T any](ts []T, i int) []T {
	if len(ts) > i {
		return ts[:i]
	}
	return ts
}
